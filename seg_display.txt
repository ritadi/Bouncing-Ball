module seg_display(
    input clk, 
    input [3:0]speed, 
    input reset,
    input loose, 
    input scored, 
    output [6:0]out1, 
    output [6:0]out2,
    );

    reg [3:0] counter;
    hex_decorder h1(.hex_digit(speed), .segements(out1));

    always@(posedge clk)
       begin
         if(reset or lose or counter == 4'b1111)
             begin
                counter <= 0;
             end
         else
             begin
                 if(scored)
                      begin
                           counter <= counter +1;
                      end
             end
       end
     hex_decorder(.hex_digit(counter), .segements(out1));   
                 

    
module hex_decoder(hex_digit, segments);

    input [3:0] hex_digit;

    output reg [6:0] segments;

   
    always @(*)

        case (hex_digit)
            4'h0: segments = 7'b100_0000;

            4'h1: segments = 7'b111_1001;

            4'h2: segments = 7'b010_0100;

            4'h3: segments = 7'b011_0000;

            4'h4: segments = 7'b001_1001;

            4'h5: segments = 7'b001_0010;

            4'h6: segments = 7'b000_0010;

            4'h7: segments = 7'b111_1000;

            4'h8: segments = 7'b000_0000;

            4'h9: segments = 7'b001_1000;

            4'hA: segments = 7'b000_1000;

            4'hB: segments = 7'b000_0011;

            4'hC: segments = 7'b100_0110;

            4'hD: segments = 7'b010_0001;

            4'hE: segments = 7'b000_0110;

            4'hF: segments = 7'b000_1110;
   
            default: segments = 7'h7f;

        endcase

endmodule

